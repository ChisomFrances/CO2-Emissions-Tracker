{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":11416362,"sourceType":"datasetVersion","datasetId":7149986}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import streamlit as st\nimport pandas as pd\nimport plotly.express as px\n\nst.set_page_config(page_title=\"CO2 Emissions Analysis\", layout=\"wide\")\n\n# 1. Load Data\n@st.cache_data\ndef load_data():\n    df = pd.read_csv(\"/kaggle/input/co2-emissions-viz-data/climate_data.csv\")\n    return df.dropna()\n\ndf = load_data()\n\n# Sidebar\nst.sidebar.title(\"üß≠ Navigation\")\nsection = st.sidebar.radio(\"Go to\", [\n    \"Historical Trends\",\n    \"Per Capita Impact\",\n    \"Emissions vs Temperature\",\n    \"Enhanced Temp Analysis\",\n    \"Interactive Map\",\n    \"Country Trends\"\n])\n\nst.title(\"üåç Climate Change Data Explorer\")\n\n# 2. Historical Trends & Turning Points\nif section == \"Historical Trends\":\n    st.header(\"üìà Historical Trends & Turning Points in Emissions\")\n\n    df_grouped = df.groupby('year').agg({\n        'co2': 'sum',\n        'cumulative_co2': 'sum'\n    }).reset_index()\n\n    fig1 = px.line(df_grouped, x='year', y='co2', title='Annual Total CO‚ÇÇ Emissions (Mt)')\n    fig2 = px.line(df_grouped, x='year', y='cumulative_co2', title='Cumulative CO‚ÇÇ Emissions (Mt)')\n\n    st.plotly_chart(fig1, use_container_width=True)\n    st.plotly_chart(fig2, use_container_width=True)\n\n# 3. Per Capita Impact and Equity Analysis\nelif section == \"Per Capita Impact\":\n    st.header(\"üë§ Per Capita Impact and Equity Analysis\")\n\n    selected_year = st.slider(\"Select Year\", int(df['year'].min()), int(df['year'].max()), 2020)\n\n    top10 = df[df['year'] == selected_year].sort_values(by='co2_per_capita', ascending=False).head(10)\n\n    fig = px.bar(top10, x='country', y='co2_per_capita', \n                 title=f\"Top 10 Countries by CO‚ÇÇ Per Capita in {selected_year}\",\n                 labels={'co2_per_capita': 'CO‚ÇÇ per Capita (tonnes)'})\n    st.plotly_chart(fig, use_container_width=True)\n\n# 4. Emissions vs Temperature Change\nelif section == \"Emissions vs Temperature\":\n    st.header(\"üå°Ô∏è Connecting Emissions to Temperature Change\")\n\n    avg_df = df.groupby('country').agg({\n        'co2': 'mean',\n        'temperature_change_from_co2': 'mean'\n    }).reset_index()\n\n    fig = px.scatter(avg_df, x='co2', y='temperature_change_from_co2',\n                     hover_name='country',\n                     title=\"Avg Annual CO‚ÇÇ vs. Temperature Change from CO‚ÇÇ\",\n                     labels={'co2': 'Avg CO‚ÇÇ Emissions (Mt)', 'temperature_change_from_co2': 'Temp Change (¬∞C)'})\n    st.plotly_chart(fig, use_container_width=True)\n\n# 5. Enhanced Temperature Change Analysis\nelif section == \"Enhanced Temp Analysis\":\n    st.header(\"üî• Enhanced Temperature Change Analysis (GHG Inclusive)\")\n\n    enhanced_df = df.groupby('country').agg({\n        'co2': 'mean',\n        'temperature_change_from_co2': 'mean',\n        'share_of_temperature_change_from_ghg': 'mean'\n    }).reset_index()\n\n    fig = px.scatter(\n        enhanced_df,\n        x='co2',\n        y='temperature_change_from_co2',\n        size='share_of_temperature_change_from_ghg',\n        hover_name='country',\n        title=\"CO‚ÇÇ vs Temperature Change, Bubble Size = GHG Share\",\n        labels={\n            'co2': 'Avg CO‚ÇÇ Emissions (Mt)',\n            'temperature_change_from_co2': 'Temp Change (¬∞C)',\n            'share_of_temperature_change_from_ghg': 'GHG Temp Share (%)'\n        }\n    )\n    st.plotly_chart(fig, use_container_width=True)\n\n# 6. Interactive Choropleth Map\nelif section == \"Interactive Map\":\n    st.header(\"üó∫Ô∏è Interactive CO‚ÇÇ per Capita Map\")\n\n    year = st.slider(\"Choose Year\", int(df['year'].min()), int(df['year'].max()), 2020)\n\n    map_data = df[df['year'] == year]\n\n    fig = px.choropleth(\n        map_data,\n        locations=\"country\",\n        locationmode=\"country names\",\n        color=\"co2_per_capita\",\n        hover_name=\"country\",\n        color_continuous_scale=\"Viridis\",\n        title=f\"CO‚ÇÇ Emissions per Capita in {year}\"\n    )\n    st.plotly_chart(fig, use_container_width=True)\n\n# 7. Country-Level Time Series\nelif section == \"Country Trends\":\n    st.header(\"üìä Country-Level CO‚ÇÇ & Temperature Trends\")\n\n    countries = st.multiselect(\"Select Countries\", df['country'].unique(), default=[\"United States\", \"China\", \"India\"])\n\n    metric = st.selectbox(\"Metric\", [\"co2\", \"co2_per_capita\", \"temperature_change_from_co2\"])\n\n    fig = px.line(df[df['country'].isin(countries)], x='year', y=metric, color='country',\n                  title=f\"{metric.replace('_', ' ').title()} Over Time\")\n\n    st.plotly_chart(fig, use_container_width=True)\n","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}